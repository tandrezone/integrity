{% extends "base.html.twig" %}

{% block title %}Index{% endblock %}
{% block content %}
    <div class="container-fluid">
        <div class="row"><div class="col text-center h1">Challenge</div></div>
        <hr/>
        <div class="row">
            <div class="container">
                <div class="row font-weight-bold">Primeira vertente</div>

                <div class="row">
                    <ul>
                        <li>Desenvolver um comando de consola para receber um URL</li>
                        <li>Este este URL deve ser seguido e a resposta HTML analisada. Deverão ser guardados em base de dados todos os caracteres encontrados que não sejam letras e quantas vezes os mesmos ocorreram no HTML em questão.</li>
                        <li>O comando deve retornar o top 20 dos caracteres encontrados num formato que permita uma leitura adequada.</li>
                    </ul>
                </div>
                <div class="row font-weight-bold">Segunda vertente</div>
                <div class="row">
                    <ul>
                        <li>Desenvolver uma página web que mostre todos os pedidos efectuados até ao momento com o comando.</li>
                        <li>Esta lista deverá ser uma tabela que mostre que URL foi inserido no comando, o URL final onde a resposta acabou a ser analisada (tendo em conta que podem existir redirects) bem como a hora a que o pedido foi feito.</li>
                        <li>Quando clicamos numa das linhas desta tabela devem ser carregados por ajax os top 20 caracteres do pedido e esses dados devem ser exibidos num gráfico de barras nessa mesma página.</li>
                    </ul>
                </div>
                <div class="row font-weight-bold">Terceira vertente</div>
                <div class="row">
                    <ul>
                        <li>A página web cada vez que for rendida, tem que, server-side, fazer uma chamada à API https://api.chucknorris.io/jokes/random e render a resposta da mesma.</li>
                        <li>E client-side tem que fazer a mesma coisa. Portanto duas piadas do Chuck Norris carregadas de duas maneiras diferentes.</li>
                    </ul>
                </div>
                <div class="row font-weight-bold">Pontos extra</div>
                <div class="row">
                    <ul>
                        <li>Disponibilizar a mesma funcionalidade do comando na interface web.
                        <li>Usar docker. Podes optar por desenvolver sem docker por uma questão de tempo mas se utilizares será um ponto positivo. Uma imagem pré feita serve, algo tipo isto https://github.com/dunglas/symfony-docker</li>
                        <li>A facilidade que eu tiver de puxar o teu código e colocar a correr a tua solução será muito relevante, portanto um readme para auxiliar nesse sentido seria bom.</li>
                    </ul>
                </div>
                <div class="row font-weight-bold">Notas</div>
                <div class="row">
                    <ul>
                        <li>Os erros devem ser tratados. Exemplo se o URL for inválido ou inacessível o utilizador deve ser informado.</li>
                        <li>A bd pode ser SQLite ou outra que entendas que te facilite a vida. Desde que o setup para mim seja transparente.</li>
                        <li>O teu challenge deve ser entregue via github, bastando para isso partilhares comigo o URL para o mesmo.</li>
                    </ul>
                </div>
            </div>
        </div>

{% endblock %}